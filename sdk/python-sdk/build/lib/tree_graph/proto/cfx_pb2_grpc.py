# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import cfx_pb2 as cfx__pb2


class CfxStub(object):
    """Request and response types are postfixed with `Grpc` to avoid name collision.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.gas_price = channel.unary_unary(
                '/Cfx/gas_price',
                request_serializer=cfx__pb2.GasPriceRequestGrpc.SerializeToString,
                response_deserializer=cfx__pb2.GasPriceResponseGrpc.FromString,
                )
        self.epoch_number = channel.unary_unary(
                '/Cfx/epoch_number',
                request_serializer=cfx__pb2.EpochNumberRequestGrpc.SerializeToString,
                response_deserializer=cfx__pb2.EpochNumberResponseGrpc.FromString,
                )
        self.balance = channel.unary_unary(
                '/Cfx/balance',
                request_serializer=cfx__pb2.BalanceRequestGrpc.SerializeToString,
                response_deserializer=cfx__pb2.BalanceResponseGrpc.FromString,
                )
        self.admin = channel.unary_unary(
                '/Cfx/admin',
                request_serializer=cfx__pb2.AdminRequestGrpc.SerializeToString,
                response_deserializer=cfx__pb2.AdminResponseGrpc.FromString,
                )
        self.code = channel.unary_unary(
                '/Cfx/code',
                request_serializer=cfx__pb2.CodeRequestGrpc.SerializeToString,
                response_deserializer=cfx__pb2.CodeResponseGrpc.FromString,
                )
        self.storage_at = channel.unary_unary(
                '/Cfx/storage_at',
                request_serializer=cfx__pb2.StorageAtRequestGrpc.SerializeToString,
                response_deserializer=cfx__pb2.StorageAtResponseGrpc.FromString,
                )
        self.block_by_hash = channel.unary_unary(
                '/Cfx/block_by_hash',
                request_serializer=cfx__pb2.BlockByHashRequestGrpc.SerializeToString,
                response_deserializer=cfx__pb2.BlockByHashResponseGrpc.FromString,
                )
        self.block_by_hash_with_pivot_assumption = channel.unary_unary(
                '/Cfx/block_by_hash_with_pivot_assumption',
                request_serializer=cfx__pb2.BlockByHashWithPivotAssumptionRequestGrpc.SerializeToString,
                response_deserializer=cfx__pb2.BlockByHashWithPivotAssumptionResponseGrpc.FromString,
                )
        self.block_by_epoch_number = channel.unary_unary(
                '/Cfx/block_by_epoch_number',
                request_serializer=cfx__pb2.BlockByEpochNumberRequestGrpc.SerializeToString,
                response_deserializer=cfx__pb2.BlockByEpochNumberResponseGrpc.FromString,
                )
        self.best_block_hash = channel.unary_unary(
                '/Cfx/best_block_hash',
                request_serializer=cfx__pb2.BestBlockHashRequestGrpc.SerializeToString,
                response_deserializer=cfx__pb2.BestBlockHashResponseGrpc.FromString,
                )
        self.next_nonce = channel.unary_unary(
                '/Cfx/next_nonce',
                request_serializer=cfx__pb2.NextNonceRequestGrpc.SerializeToString,
                response_deserializer=cfx__pb2.NextNonceResponseGrpc.FromString,
                )
        self.send_raw_transaction = channel.unary_unary(
                '/Cfx/send_raw_transaction',
                request_serializer=cfx__pb2.SendRawTransactionRequestGrpc.SerializeToString,
                response_deserializer=cfx__pb2.SendRawTransactionResponseGrpc.FromString,
                )
        self.call = channel.unary_unary(
                '/Cfx/call',
                request_serializer=cfx__pb2.CallRequestGrpc.SerializeToString,
                response_deserializer=cfx__pb2.CallResponseGrpc.FromString,
                )
        self.get_logs = channel.unary_unary(
                '/Cfx/get_logs',
                request_serializer=cfx__pb2.GetLogsRequestGrpc.SerializeToString,
                response_deserializer=cfx__pb2.GetLogsResponseGrpc.FromString,
                )
        self.transaction_by_hash = channel.unary_unary(
                '/Cfx/transaction_by_hash',
                request_serializer=cfx__pb2.TransactionByHashRequestGrpc.SerializeToString,
                response_deserializer=cfx__pb2.TransactionByHashResponseGrpc.FromString,
                )
        self.estimate_gas = channel.unary_unary(
                '/Cfx/estimate_gas',
                request_serializer=cfx__pb2.EstimateGasRequestGrpc.SerializeToString,
                response_deserializer=cfx__pb2.EstimateGasResponseGrpc.FromString,
                )
        self.blocks_by_epoch = channel.unary_unary(
                '/Cfx/blocks_by_epoch',
                request_serializer=cfx__pb2.BlocksByEpochRequestGrpc.SerializeToString,
                response_deserializer=cfx__pb2.BlocksByEpochResponseGrpc.FromString,
                )
        self.transaction_receipt = channel.unary_unary(
                '/Cfx/transaction_receipt',
                request_serializer=cfx__pb2.TransactionReceiptRequestGrpc.SerializeToString,
                response_deserializer=cfx__pb2.TransactionReceiptResponseGrpc.FromString,
                )
        self.account = channel.unary_unary(
                '/Cfx/account',
                request_serializer=cfx__pb2.AccountRequestGrpc.SerializeToString,
                response_deserializer=cfx__pb2.AccountResponseGrpc.FromString,
                )
        self.get_membership_change_raw_transaction = channel.unary_unary(
                '/Cfx/get_membership_change_raw_transaction',
                request_serializer=cfx__pb2.GetMembershipChangeRawTransactionRequestGrpc.SerializeToString,
                response_deserializer=cfx__pb2.GetMembershipChangeRawTransactionResponseGrpc.FromString,
                )
        self.construct_and_send_new_consortium_member_trans = channel.unary_unary(
                '/Cfx/construct_and_send_new_consortium_member_trans',
                request_serializer=cfx__pb2.ConstructAndSendNewConsortiumMemberTransRequestGrpc.SerializeToString,
                response_deserializer=cfx__pb2.ConstructAndSendNewConsortiumMemberTransResponseGrpc.FromString,
                )
        self.send_new_consortium_member_trans = channel.unary_unary(
                '/Cfx/send_new_consortium_member_trans',
                request_serializer=cfx__pb2.SendNewConsortiumMemberTransRequestGrpc.SerializeToString,
                response_deserializer=cfx__pb2.SendNewConsortiumMemberTransResponseGrpc.FromString,
                )
        self.get_bft_membership_id = channel.unary_unary(
                '/Cfx/get_bft_membership_id',
                request_serializer=cfx__pb2.GetBftMembershipIdRequestGrpc.SerializeToString,
                response_deserializer=cfx__pb2.GetBftMembershipIdResponseGrpc.FromString,
                )
        self.get_validator_set = channel.unary_unary(
                '/Cfx/get_validator_set',
                request_serializer=cfx__pb2.GetValidatorSetRequestGrpc.SerializeToString,
                response_deserializer=cfx__pb2.GetValidatorSetResponseGrpc.FromString,
                )
        self.update_consortium_and_grpc_credential = channel.unary_unary(
                '/Cfx/update_consortium_and_grpc_credential',
                request_serializer=cfx__pb2.UpdateConsortiumAndGrpcCredentialRequestGrpc.SerializeToString,
                response_deserializer=cfx__pb2.UpdateConsortiumAndGrpcCredentialResponseGrpc.FromString,
                )
        self.get_consortium_certificate = channel.unary_unary(
                '/Cfx/get_consortium_certificate',
                request_serializer=cfx__pb2.GetConsortiumCertificateRequestGrpc.SerializeToString,
                response_deserializer=cfx__pb2.GetConsortiumCertificateResponseGrpc.FromString,
                )
        self.get_status = channel.unary_unary(
                '/Cfx/get_status',
                request_serializer=cfx__pb2.GetStatusRequestGrpc.SerializeToString,
                response_deserializer=cfx__pb2.GetStatusResponseGrpc.FromString,
                )


class CfxServicer(object):
    """Request and response types are postfixed with `Grpc` to avoid name collision.
    """

    def gas_price(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def epoch_number(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def balance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def admin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def code(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def storage_at(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def block_by_hash(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def block_by_hash_with_pivot_assumption(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def block_by_epoch_number(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def best_block_hash(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def next_nonce(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def send_raw_transaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def call(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_logs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def transaction_by_hash(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def estimate_gas(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def blocks_by_epoch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def transaction_receipt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def account(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_membership_change_raw_transaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def construct_and_send_new_consortium_member_trans(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def send_new_consortium_member_trans(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_bft_membership_id(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_validator_set(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_consortium_and_grpc_credential(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_consortium_certificate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CfxServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'gas_price': grpc.unary_unary_rpc_method_handler(
                    servicer.gas_price,
                    request_deserializer=cfx__pb2.GasPriceRequestGrpc.FromString,
                    response_serializer=cfx__pb2.GasPriceResponseGrpc.SerializeToString,
            ),
            'epoch_number': grpc.unary_unary_rpc_method_handler(
                    servicer.epoch_number,
                    request_deserializer=cfx__pb2.EpochNumberRequestGrpc.FromString,
                    response_serializer=cfx__pb2.EpochNumberResponseGrpc.SerializeToString,
            ),
            'balance': grpc.unary_unary_rpc_method_handler(
                    servicer.balance,
                    request_deserializer=cfx__pb2.BalanceRequestGrpc.FromString,
                    response_serializer=cfx__pb2.BalanceResponseGrpc.SerializeToString,
            ),
            'admin': grpc.unary_unary_rpc_method_handler(
                    servicer.admin,
                    request_deserializer=cfx__pb2.AdminRequestGrpc.FromString,
                    response_serializer=cfx__pb2.AdminResponseGrpc.SerializeToString,
            ),
            'code': grpc.unary_unary_rpc_method_handler(
                    servicer.code,
                    request_deserializer=cfx__pb2.CodeRequestGrpc.FromString,
                    response_serializer=cfx__pb2.CodeResponseGrpc.SerializeToString,
            ),
            'storage_at': grpc.unary_unary_rpc_method_handler(
                    servicer.storage_at,
                    request_deserializer=cfx__pb2.StorageAtRequestGrpc.FromString,
                    response_serializer=cfx__pb2.StorageAtResponseGrpc.SerializeToString,
            ),
            'block_by_hash': grpc.unary_unary_rpc_method_handler(
                    servicer.block_by_hash,
                    request_deserializer=cfx__pb2.BlockByHashRequestGrpc.FromString,
                    response_serializer=cfx__pb2.BlockByHashResponseGrpc.SerializeToString,
            ),
            'block_by_hash_with_pivot_assumption': grpc.unary_unary_rpc_method_handler(
                    servicer.block_by_hash_with_pivot_assumption,
                    request_deserializer=cfx__pb2.BlockByHashWithPivotAssumptionRequestGrpc.FromString,
                    response_serializer=cfx__pb2.BlockByHashWithPivotAssumptionResponseGrpc.SerializeToString,
            ),
            'block_by_epoch_number': grpc.unary_unary_rpc_method_handler(
                    servicer.block_by_epoch_number,
                    request_deserializer=cfx__pb2.BlockByEpochNumberRequestGrpc.FromString,
                    response_serializer=cfx__pb2.BlockByEpochNumberResponseGrpc.SerializeToString,
            ),
            'best_block_hash': grpc.unary_unary_rpc_method_handler(
                    servicer.best_block_hash,
                    request_deserializer=cfx__pb2.BestBlockHashRequestGrpc.FromString,
                    response_serializer=cfx__pb2.BestBlockHashResponseGrpc.SerializeToString,
            ),
            'next_nonce': grpc.unary_unary_rpc_method_handler(
                    servicer.next_nonce,
                    request_deserializer=cfx__pb2.NextNonceRequestGrpc.FromString,
                    response_serializer=cfx__pb2.NextNonceResponseGrpc.SerializeToString,
            ),
            'send_raw_transaction': grpc.unary_unary_rpc_method_handler(
                    servicer.send_raw_transaction,
                    request_deserializer=cfx__pb2.SendRawTransactionRequestGrpc.FromString,
                    response_serializer=cfx__pb2.SendRawTransactionResponseGrpc.SerializeToString,
            ),
            'call': grpc.unary_unary_rpc_method_handler(
                    servicer.call,
                    request_deserializer=cfx__pb2.CallRequestGrpc.FromString,
                    response_serializer=cfx__pb2.CallResponseGrpc.SerializeToString,
            ),
            'get_logs': grpc.unary_unary_rpc_method_handler(
                    servicer.get_logs,
                    request_deserializer=cfx__pb2.GetLogsRequestGrpc.FromString,
                    response_serializer=cfx__pb2.GetLogsResponseGrpc.SerializeToString,
            ),
            'transaction_by_hash': grpc.unary_unary_rpc_method_handler(
                    servicer.transaction_by_hash,
                    request_deserializer=cfx__pb2.TransactionByHashRequestGrpc.FromString,
                    response_serializer=cfx__pb2.TransactionByHashResponseGrpc.SerializeToString,
            ),
            'estimate_gas': grpc.unary_unary_rpc_method_handler(
                    servicer.estimate_gas,
                    request_deserializer=cfx__pb2.EstimateGasRequestGrpc.FromString,
                    response_serializer=cfx__pb2.EstimateGasResponseGrpc.SerializeToString,
            ),
            'blocks_by_epoch': grpc.unary_unary_rpc_method_handler(
                    servicer.blocks_by_epoch,
                    request_deserializer=cfx__pb2.BlocksByEpochRequestGrpc.FromString,
                    response_serializer=cfx__pb2.BlocksByEpochResponseGrpc.SerializeToString,
            ),
            'transaction_receipt': grpc.unary_unary_rpc_method_handler(
                    servicer.transaction_receipt,
                    request_deserializer=cfx__pb2.TransactionReceiptRequestGrpc.FromString,
                    response_serializer=cfx__pb2.TransactionReceiptResponseGrpc.SerializeToString,
            ),
            'account': grpc.unary_unary_rpc_method_handler(
                    servicer.account,
                    request_deserializer=cfx__pb2.AccountRequestGrpc.FromString,
                    response_serializer=cfx__pb2.AccountResponseGrpc.SerializeToString,
            ),
            'get_membership_change_raw_transaction': grpc.unary_unary_rpc_method_handler(
                    servicer.get_membership_change_raw_transaction,
                    request_deserializer=cfx__pb2.GetMembershipChangeRawTransactionRequestGrpc.FromString,
                    response_serializer=cfx__pb2.GetMembershipChangeRawTransactionResponseGrpc.SerializeToString,
            ),
            'construct_and_send_new_consortium_member_trans': grpc.unary_unary_rpc_method_handler(
                    servicer.construct_and_send_new_consortium_member_trans,
                    request_deserializer=cfx__pb2.ConstructAndSendNewConsortiumMemberTransRequestGrpc.FromString,
                    response_serializer=cfx__pb2.ConstructAndSendNewConsortiumMemberTransResponseGrpc.SerializeToString,
            ),
            'send_new_consortium_member_trans': grpc.unary_unary_rpc_method_handler(
                    servicer.send_new_consortium_member_trans,
                    request_deserializer=cfx__pb2.SendNewConsortiumMemberTransRequestGrpc.FromString,
                    response_serializer=cfx__pb2.SendNewConsortiumMemberTransResponseGrpc.SerializeToString,
            ),
            'get_bft_membership_id': grpc.unary_unary_rpc_method_handler(
                    servicer.get_bft_membership_id,
                    request_deserializer=cfx__pb2.GetBftMembershipIdRequestGrpc.FromString,
                    response_serializer=cfx__pb2.GetBftMembershipIdResponseGrpc.SerializeToString,
            ),
            'get_validator_set': grpc.unary_unary_rpc_method_handler(
                    servicer.get_validator_set,
                    request_deserializer=cfx__pb2.GetValidatorSetRequestGrpc.FromString,
                    response_serializer=cfx__pb2.GetValidatorSetResponseGrpc.SerializeToString,
            ),
            'update_consortium_and_grpc_credential': grpc.unary_unary_rpc_method_handler(
                    servicer.update_consortium_and_grpc_credential,
                    request_deserializer=cfx__pb2.UpdateConsortiumAndGrpcCredentialRequestGrpc.FromString,
                    response_serializer=cfx__pb2.UpdateConsortiumAndGrpcCredentialResponseGrpc.SerializeToString,
            ),
            'get_consortium_certificate': grpc.unary_unary_rpc_method_handler(
                    servicer.get_consortium_certificate,
                    request_deserializer=cfx__pb2.GetConsortiumCertificateRequestGrpc.FromString,
                    response_serializer=cfx__pb2.GetConsortiumCertificateResponseGrpc.SerializeToString,
            ),
            'get_status': grpc.unary_unary_rpc_method_handler(
                    servicer.get_status,
                    request_deserializer=cfx__pb2.GetStatusRequestGrpc.FromString,
                    response_serializer=cfx__pb2.GetStatusResponseGrpc.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Cfx', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Cfx(object):
    """Request and response types are postfixed with `Grpc` to avoid name collision.
    """

    @staticmethod
    def gas_price(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cfx/gas_price',
            cfx__pb2.GasPriceRequestGrpc.SerializeToString,
            cfx__pb2.GasPriceResponseGrpc.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def epoch_number(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cfx/epoch_number',
            cfx__pb2.EpochNumberRequestGrpc.SerializeToString,
            cfx__pb2.EpochNumberResponseGrpc.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def balance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cfx/balance',
            cfx__pb2.BalanceRequestGrpc.SerializeToString,
            cfx__pb2.BalanceResponseGrpc.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def admin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cfx/admin',
            cfx__pb2.AdminRequestGrpc.SerializeToString,
            cfx__pb2.AdminResponseGrpc.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def code(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cfx/code',
            cfx__pb2.CodeRequestGrpc.SerializeToString,
            cfx__pb2.CodeResponseGrpc.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def storage_at(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cfx/storage_at',
            cfx__pb2.StorageAtRequestGrpc.SerializeToString,
            cfx__pb2.StorageAtResponseGrpc.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def block_by_hash(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cfx/block_by_hash',
            cfx__pb2.BlockByHashRequestGrpc.SerializeToString,
            cfx__pb2.BlockByHashResponseGrpc.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def block_by_hash_with_pivot_assumption(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cfx/block_by_hash_with_pivot_assumption',
            cfx__pb2.BlockByHashWithPivotAssumptionRequestGrpc.SerializeToString,
            cfx__pb2.BlockByHashWithPivotAssumptionResponseGrpc.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def block_by_epoch_number(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cfx/block_by_epoch_number',
            cfx__pb2.BlockByEpochNumberRequestGrpc.SerializeToString,
            cfx__pb2.BlockByEpochNumberResponseGrpc.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def best_block_hash(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cfx/best_block_hash',
            cfx__pb2.BestBlockHashRequestGrpc.SerializeToString,
            cfx__pb2.BestBlockHashResponseGrpc.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def next_nonce(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cfx/next_nonce',
            cfx__pb2.NextNonceRequestGrpc.SerializeToString,
            cfx__pb2.NextNonceResponseGrpc.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def send_raw_transaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cfx/send_raw_transaction',
            cfx__pb2.SendRawTransactionRequestGrpc.SerializeToString,
            cfx__pb2.SendRawTransactionResponseGrpc.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def call(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cfx/call',
            cfx__pb2.CallRequestGrpc.SerializeToString,
            cfx__pb2.CallResponseGrpc.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_logs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cfx/get_logs',
            cfx__pb2.GetLogsRequestGrpc.SerializeToString,
            cfx__pb2.GetLogsResponseGrpc.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def transaction_by_hash(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cfx/transaction_by_hash',
            cfx__pb2.TransactionByHashRequestGrpc.SerializeToString,
            cfx__pb2.TransactionByHashResponseGrpc.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def estimate_gas(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cfx/estimate_gas',
            cfx__pb2.EstimateGasRequestGrpc.SerializeToString,
            cfx__pb2.EstimateGasResponseGrpc.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def blocks_by_epoch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cfx/blocks_by_epoch',
            cfx__pb2.BlocksByEpochRequestGrpc.SerializeToString,
            cfx__pb2.BlocksByEpochResponseGrpc.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def transaction_receipt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cfx/transaction_receipt',
            cfx__pb2.TransactionReceiptRequestGrpc.SerializeToString,
            cfx__pb2.TransactionReceiptResponseGrpc.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def account(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cfx/account',
            cfx__pb2.AccountRequestGrpc.SerializeToString,
            cfx__pb2.AccountResponseGrpc.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_membership_change_raw_transaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cfx/get_membership_change_raw_transaction',
            cfx__pb2.GetMembershipChangeRawTransactionRequestGrpc.SerializeToString,
            cfx__pb2.GetMembershipChangeRawTransactionResponseGrpc.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def construct_and_send_new_consortium_member_trans(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cfx/construct_and_send_new_consortium_member_trans',
            cfx__pb2.ConstructAndSendNewConsortiumMemberTransRequestGrpc.SerializeToString,
            cfx__pb2.ConstructAndSendNewConsortiumMemberTransResponseGrpc.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def send_new_consortium_member_trans(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cfx/send_new_consortium_member_trans',
            cfx__pb2.SendNewConsortiumMemberTransRequestGrpc.SerializeToString,
            cfx__pb2.SendNewConsortiumMemberTransResponseGrpc.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_bft_membership_id(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cfx/get_bft_membership_id',
            cfx__pb2.GetBftMembershipIdRequestGrpc.SerializeToString,
            cfx__pb2.GetBftMembershipIdResponseGrpc.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_validator_set(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cfx/get_validator_set',
            cfx__pb2.GetValidatorSetRequestGrpc.SerializeToString,
            cfx__pb2.GetValidatorSetResponseGrpc.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_consortium_and_grpc_credential(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cfx/update_consortium_and_grpc_credential',
            cfx__pb2.UpdateConsortiumAndGrpcCredentialRequestGrpc.SerializeToString,
            cfx__pb2.UpdateConsortiumAndGrpcCredentialResponseGrpc.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_consortium_certificate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cfx/get_consortium_certificate',
            cfx__pb2.GetConsortiumCertificateRequestGrpc.SerializeToString,
            cfx__pb2.GetConsortiumCertificateResponseGrpc.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cfx/get_status',
            cfx__pb2.GetStatusRequestGrpc.SerializeToString,
            cfx__pb2.GetStatusResponseGrpc.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

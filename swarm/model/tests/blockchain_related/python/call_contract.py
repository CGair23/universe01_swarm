from tree_graph.client.jsonrpc_client import *
from tree_graph.types.filter import Filter
import eth_utils
from coder_lib import encode_many

import logging

DEFAULT_TX_GAS_PRICE = 80 * (10 ** 9) * 100
DEFAULT_TX_GAS = 2100000 * 10

if __name__ == '__main__':
    # logging.basicConfig(level=logging.DEBUG)
    # Create an account with Conflux Portal
    
    # this is Bob   
    Bob_addr = "0x19aeb665dfa6a8445a46cd9a5c666ac6c0d03c54"
    Bob_prik = "0xb205017cc1b95e12aa37784b3e66eaf099ba6cf0e80cf10f8fc87b44abba53a7"

    Alice_addr = "0x1f9422c17a85f15473d5e25834d17d48c2356c7c"
    Alice_prik = "0x5bba79b1fbba518c7283750cf6a1175f3180fab586c1b1787539885f3132ef4f"

    # #
    # admin = client.get_admin("0x881c2f792c8f361d43bfbe44ba500b407bc33e4d")
    # print("[+] contract admin is ", admin)

    # #
    # code = client.get_code("0x881c2f792c8f361d43bfbe44ba500b407bc33e4d")
    # assert(code, "0x608060405234801561001057600080fd5b50610108806100206000396000f3fe6080604052600436106043576000357c0100000000000000000000000000000000000000000000000000000000900480631003e2d2146048578063c3da42b8146093575b600080fd5b348015605357600080fd5b50607d60048036036020811015606857600080fd5b810190808035906020019092919050505060bb565b6040518082815260200191505060405180910390f35b348015609e57600080fd5b5060a560d6565b6040518082815260200191505060405180910390f35b60008060649050808301600081905550600054915050919050565b6000548156fea165627a7a72305820a2a6fe03ea6ab4b31315afea9ea3747b09e3871d0a1df464cf2297a552b1aadb0029")
    # print("[+] contract code is ", code)

   #  nextNonce = client.get_nonce(Bob_addr)
    # nextNonce = client.get_nonce(Alice_addr)
   #  epoch_number = client.epoch_number()
    # admin = client.get_admin("0x87fae4883bbdcbe8c315dd5162ab11da7b665724")
    # print(f"[+] admin: {admin}")
    # code = client.get_code("0x87fae4883bbdcbe8c315dd5162ab11da7b665724")
    # print(f"[+] code: {code}")

    # 
    # The data used when calling the contract is generated by ABI encoding based on the function information described by the ABI. 
    # The first 4 bytes are the function selector (the first 4 bytes of the Keccak (SHA-3) hash of the function signature), and the fifth byte starts with the ABI-encoded parameter.

    # test add
    # ek = eth_utils.keccak(b"add(uint256)")
    # data_prefix = ek[0:4].hex()
    # data_body = encode_many(["uint256", "1"])
    # data_hex = data_prefix + data_body

    # test task handler
    # # contract handler addr = ''
    func_proto = eth_utils.keccak(b"taskHandler(uint256,uint256)")
    data_prefix = func_proto[0:4].hex()
    data_body = encode_many(["uint256", "1", "uint256", "2"])
    data_hex = data_prefix + data_body

    # test recorder
    # contract recorder addr = '0x8723756d8b4cab11ffa39e316200513e32c8ef7c'
   #  func_proto = eth_utils.keccak(b"recordPara(uint256,uint128,uint128,uint64,uint64,uint128,uint128,int128[])")
   #  data_prefix = func_proto[0:4].hex()
   #  data_body = encode_many(["uint", "1", "int128", "1", "int128", "1", "uint64", "1", \
   #                                  "uint64", "1", "uint128", "10000000", "uint128", "1", "int128[]", "[-80241337,237499829,-38564152,-58856187,22570223,175331999,-83909295,109190438,-178776160,-23182784]"])
   #  data_hex = data_prefix + data_body

    print(f"[+] data in hex = {data_hex}")
    expected = "5daadbabafffffffffffffffffffffffffffffffffffffffffffffffffffffffffb379d47000000000000000000000000000000000000000000000000000000000e27f5b5fffffffffffffffffffffffffffffffffffffffffffffffffffffffffdb38ec8fffffffffffffffffffffffffffffffffffffffffffffffffffffffffc7ded0500000000000000000000000000000000000000000000000000000000015864ef000000000000000000000000000000000000000000000000000000000a735a9ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaffa5510000000000000000000000000000000000000000000000000000000006821d26fffffffffffffffffffffffffffffffffffffffffffffffffffffffff55817a0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffe9e4240"
    # assert data_hex == expected
    b_val = bytes.fromhex(expected)

   #  tx = client.new_tx(
   #                     sender=Bob_addr,
   #                  #    sender=Alice_addr,
   #                     receiver='0x82aa4580dbed41ed419797111c0531542091a1f1', 
   #                     nonce=nextNonce,
   #                     gas_price=DEFAULT_TX_GAS_PRICE,
   #                     gas=DEFAULT_TX_GAS,
   #                     value=0, 
   #                     data=b_val, 
   #                     sign=True, 
   #                     priv_key=Bob_prik, 
   #                  #    priv_key=Alice_prik, 
   #                     epoch_height=epoch_number, 
   #                     chain_id=0)
    
    # tx_hash = client.send_tx(tx)
    # tx_hash = "0x970503b4374ef4f7a7705e7329db3f203e3074934eeddc276f19ed25ca8b5d21"    # Bob
   #  tx_hash = "0xe4b7fdbf90971352189978186c7b633f3e2c1fac320dcef2351cb101c69a32d2"    # Alice
    # print("[+] the send transaction hash is ", tx_hash)  
    
    # tx_info = client.get_tx(tx_hash)
    # print(f"[+] the tx info of {tx_hash} is ", tx_info)
    
   #  tx_receipt = client.get_transaction_receipt(tx_hash)
   #  print(f"[+] the tx receip of {tx_hash} is ", tx_receipt)     # the contract is deployed after sending a transaction with data as bytecode. 
                                                            # The contractCreated field of the transaction receipt is the contract address after deployment.

   #  filter = Filter(
   #      # address=["0x8effaf28f429f30c666fc3b100c74a932d727b77", "0x88780cfb6902d24142f2efcd390516e4de52ab2b"]
   #      address=["0x88780cfb6902d24142f2efcd390516e4de52ab2b"]
   #      )
   #  logs = client.get_logs(filter)
   #  print(f"[+] logs[] is {logs}")


    


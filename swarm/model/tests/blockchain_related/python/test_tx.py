from tree_graph.client.jsonrpc_client import *
from utils import priv_to_addr
import logging

DEFAULT_TX_GAS_PRICE = 80 * (10 ** 9)
DEFAULT_TX_GAS = 2100000

if __name__ == '__main__':
    # logging.basicConfig(level=logging.DEBUG)
    # Create an account with Conflux Portal
    client = JsonRpcClient("localhost", "12537")

    # Export and copy your private key to somewhere, we'll use it later.
    # print(f"RANDOM ACCOUNT={client.gen_account()}")  # maybe there will raise the following error "import _tkinter # If this fails your Python may not be configured for Tk ModuleNotFoundError: No module named '_tkinter'"
                                                     # somehow I run `brew install python-tk` to fix it
                
    addr = "0x19aeb665dfa6a8445a46cd9a5c666ac6c0d03c54"
    priv_key = "0xb205017cc1b95e12aa37784b3e66eaf099ba6cf0e80cf10f8fc87b44abba53a7"

    # 
    nextNonce = client.get_nonce(addr)
    print(f"[+] the next nonce of account {addr} is ", nextNonce)

    # 
    genesis_pri_key = eth_utils.decode_hex("0x46b9e861b63d3509c88b7817275a30d22d62c8cd8fa6486ddee35ef0d8e0495f")
    genesis_addr = eth_utils.encode_hex(priv_to_addr(genesis_pri_key))

    genesis_nextNonce = client.get_nonce(genesis_addr)
    print(f"[+] the next nonce genesis addr {genesis_addr} is ", genesis_nextNonce)

    # 
    # balance = client.get_balance(genesis_addr)
    # print(f"[+] the balance of genesis addr {genesis_addr} is ", balance)

    #
    balance = client.get_balance(addr)
    print(f"[+] the balance of {addr} is ", balance)

    # 
    # top up
    client.top_up(addr)

    # violent charging
    # balance = client.get_balance(addr)
    # print(f"[+] the balance of {addr} after charging is ", balance)

    #
    # epoch_number = client.epoch_number()
    # print("[+] epoch number is ", epoch_number)

    # The contract deployment is creating a contract instance on the blockchain 
    # by sending a transaction with data as bytecode and to left empty.
    # 
    # The data used when calling the contract is generated by ABI encoding based on the function information described by the ABI. 
    # The first 4 bytes are the function selector (the first 4 bytes of the Keccak (SHA-3) hash of the function signature), and the fifth byte starts with the ABI-encoded parameter.
    # tx = client.new_tx(sender='0x19aeb665dfa6a8445a46cd9a5c666ac6c0d03c54',
    #                    receiver='0x881c2f792c8f361d43bfbe44ba500b407bc33e4d', 
    #                    nonce=nextNonce,
    #                    gas_price=DEFAULT_TX_GAS_PRICE,
    #                    gas=DEFAULT_TX_GAS,
    #                    value=0, 
    #                    data=b'0x608060405234801561001057600080fd5b50610108806100206000396000f3fe6080604052600436106043576000357c0100000000000000000000000000000000000000000000000000000000900480631003e2d2146048578063c3da42b8146093575b600080fd5b348015605357600080fd5b50607d60048036036020811015606857600080fd5b810190808035906020019092919050505060bb565b6040518082815260200191505060405180910390f35b348015609e57600080fd5b5060a560d6565b6040518082815260200191505060405180910390f35b60008060649050808301600081905550600054915050919050565b6000548156fea165627a7a72305820a2a6fe03ea6ab4b31315afea9ea3747b09e3871d0a1df464cf2297a552b1aadb0029', 
    #                    sign=True, 
    #                    priv_key=priv_key, 
    #                    epoch_height=epoch_number, 
    #                    chain_id=0)

    #
    # tx_hash = client.send_tx(tx)
    # print("[+] the send transaction hash is ", tx_hash)  
    
    # tx_hash = ""
    # tx_info = client.get_tx(tx_hash)
    # print(f"[+] the tx info of {tx_hash} is ", tx_info)
    
    # tx_receipt = client.get_transaction_receipt(tx_hash)
    # print(f"[+] the tx receip of {tx_hash} is ", tx_receipt)     # the contract is deployed after sending a transaction with data as bytecode. 
                                                            # The contractCreated field of the transaction receipt is the contract address after deployment.
